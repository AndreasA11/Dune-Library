@page "/passages"
@using Microsoft.CodeAnalysis.CSharp.Syntax
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using DuneLibrary.Models
@using DuneLibrary.Data
@implements IAsyncDisposable
@inject IDbContextFactory<DuneLibrary.Data.DuneLibraryContext> DbFactory

<PageTitle>Welcome to Dune Library</PageTitle>

<h1>Passages</h1>

<div>
    <form action="/passages" data-enhance data-permanent>
        <label for="bookNameDrop">Filter by Book</label>
        <select id="bookNameDrop"name = "BookNameDropdown">    
            <option value=""></option>
            <option value="Dune">Dune</option>
            <option value="Dune Messiah">Dune Messiah</option>
            <option value="Children of Dune">Children of Dune</option>
            <option value="God Emperor of Dune">God Emperor of Dune</option>
            <option value="Heretics of Dune">Heretics of Dune</option>
            <option value="Chapterhouse: Dune">Chapterhouse: Dune</option>
        </select>
        <label for="organizationDropdown">Filter by Organization</label>
        <select id="organizationDropdown"name = "OrganizationNameDropdown">    
            <option value=""></option>
            <option value="Bene Gesserit">Bene Gesserit</option>
            <option value="Bene Tleilax">Bene Tleilax</option>
            <option value="CHOAM">CHOAM</option>
            <option value="Fremen">Fremen</option>
            <option value="God Emperor Regime">God Emperor Regime</option>
            <option value="Honored Matres">Honored Matres</option>
            <option value="Mahdi Spirit Cult">Mahdi Spirit Cult</option>
            <option value="Mentats">Mentats</option>
            <option value="Muad'Dib's Empire">Muad'Dib's Empire</option>
            <option value="Padishah Empire">Padishah Empire</option>
            <option value="Spacing Guild">Spacing Guild</option>
        </select>
        <label for="authorSearch">Passage Author Name Search</label>
        <input id="authorSearch" type="search" name="AuthorNameSearch" />
        <label for="keywordSearch">Passage Keyword Search</label>
        <input id="keywordSearch" type="search" name="keywordSearch" />
        <input type="submit"/>

    </form>
</div>

<p>
    <a href="passages/create">Create New</a>
</p>



<QuickGrid Id="QG1" Class="table" Items="setFilteredPassage()">
    <PropertyColumn Property="passage => passage.Passages" />
    <PropertyColumn Property="passage => passage.Book" />
    <PropertyColumn Property="passage => passage.ChapterNum" Title ="Chapter #"/>
    <PropertyColumn Property="passage => passage.Author" />
    <PropertyColumn Property="passage => passage.Series" />
    <PropertyColumn Property="passage => passage.Organization" />
    <PropertyColumn Property="passage => passage.WordCount" Title ="Word Count"/>

    <TemplateColumn Context="passage">
        <a href="@($"passages/edit?id={passage.Id}")">Edit</a> |
        <a href="@($"passages/details?id={passage.Id}")">Details</a> |
        <a href="@($"passages/delete?id={passage.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private DuneLibraryContext context = default!;
    [SupplyParameterFromQuery]
    //private string? BookNameFilter { get; set; }
    private string? AuthorNameSearch { get; set; }
    
    [SupplyParameterFromQuery]
    private string? BookNameDropdown { get; set; }
    
    [SupplyParameterFromQuery]
    private string? OrganizationNameDropdown { get; set; }

    [SupplyParameterFromQuery]
    private string? keywordSearch { get; set; }

    //Changes what the filtering of the passage is based on what BookNameDropdown is
    //if BookNameDropdown is nothing, allow for author based searching to work regardless of book name
    //else need both book name and author name of passage to be correct
    private IQueryable<Passage> setFilteredPassage() {
        if(BookNameDropdown == "") {
            IQueryable<Passage> FilteredPassages1 =   
                context.Passage.Where(p => (p.Author.Contains(AuthorNameSearch ?? string.Empty) 
                && p.Book.Contains(BookNameDropdown ?? string.Empty)
                && p.Organization.Contains(OrganizationNameDropdown ?? string.Empty)
                && p.Passages.Contains(keywordSearch ?? string.Empty))); 
            return FilteredPassages1;
        } else {
            IQueryable<Passage> FilteredPassages2 =
                context.Passage.Where(p => (p.Author.Contains(AuthorNameSearch ?? string.Empty) 
                && p.Book.Equals(BookNameDropdown ?? string.Empty)
                && p.Organization.Contains(OrganizationNameDropdown ?? string.Empty)
                && p.Passages.Contains(keywordSearch ?? string.Empty)));
            return FilteredPassages2;
        }
    }
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
