@page "/edit"
@using Microsoft.EntityFrameworkCore
@using DuneLibrary.Models
@inject IDbContextFactory<DuneLibrary.Data.DuneLibraryContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Passage</h2>
<hr />
@if (Passage is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Passage" OnValidSubmit="UpdatePassage" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Passage.Id" value="@Passage.Id" />
                <div class="mb-3">
                    <label for="Passages" class="form-label">Passages:</label>
                    <InputText id="Passages" @bind-Value="Passage.Passages" class="form-control" />
                    <ValidationMessage For="() => Passage.Passages" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="book" class="form-label">Book:</label>
                    <InputText id="book" @bind-Value="Passage.Book" class="form-control" />
                    <ValidationMessage For="() => Passage.Book" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="chapternum" class="form-label">Chapter Number:</label>
                    <InputNumber id="chapternum" @bind-Value="Passage.ChapterNum" class="form-control" />
                    <ValidationMessage For="() => Passage.ChapterNum" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="author" class="form-label">Author:</label>
                    <InputText id="author" @bind-Value="Passage.Author" class="form-control" />
                    <ValidationMessage For="() => Passage.Author" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="series" class="form-label">Series:</label>
                    <InputText id="series" @bind-Value="Passage.Series" class="form-control" />
                    <ValidationMessage For="() => Passage.Series" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="organization" class="form-label">Organization:</label>
                    <InputText id="organization" @bind-Value="Passage.Organization" class="form-control" />
                    <ValidationMessage For="() => Passage.Organization" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fullPassageCredit" class="form-label">Full Passage Credit:</label>
                    <InputText id="fullPassageCredit" @bind-Value="Passage.FullPassageCredit" class="form-control" />
                    <ValidationMessage For="() => Passage.FullPassageCredit" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="wordcount" class="form-label">Word Count:</label>
                    <InputNumber id="wordcount" @bind-Value="Passage.WordCount" class="form-control" />
                    <ValidationMessage For="() => Passage.WordCount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/?BookNameDropdown=&OrganizationNameDropdown=">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Passage? Passage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Passage ??= await context.Passage.FirstOrDefaultAsync(m => m.Id == Id);

        if (Passage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePassage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Passage!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PassageExists(Passage!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/");
    }

    private bool PassageExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Passage.Any(e => e.Id == id);
    }
}
