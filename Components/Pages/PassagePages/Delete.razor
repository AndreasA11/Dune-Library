@page "/passages/delete"
@using Microsoft.EntityFrameworkCore
@using DuneLibrary.Models
@inject IDbContextFactory<DuneLibrary.Data.DuneLibraryContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Passage</h2>
    <hr />
    @if (passage is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Passages</dt>
            <dd class="col-sm-10">@passage.Passages</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Book</dt>
            <dd class="col-sm-10">@passage.Book</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Chapter Num</dt>
            <dd class="col-sm-10">@passage.ChapterNum</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@passage.Author</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Series</dt>
            <dd class="col-sm-10">@passage.Series</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Organization</dt>
            <dd class="col-sm-10">@passage.Organization</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Word Count</dt>
            <dd class="col-sm-10">@passage.WordCount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Average Rating</dt>
            <dd class="col-sm-10">@passage.AverageRating</dd>
        </dl>
        <EditForm method="post" Model="passage" OnValidSubmit="DeletePassage" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(passage is null)">Delete</button> |
            <a href="/passages">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Passage? passage;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        passage = await context.Passage.FirstOrDefaultAsync(m => m.Id == Id);

        if (passage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePassage()
    {
        using var context = DbFactory.CreateDbContext();
        context.Passage.Remove(passage!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/passages");
    }
}
