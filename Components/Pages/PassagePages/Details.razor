@page "/passages/details"
@using Microsoft.EntityFrameworkCore
@using DuneLibrary.Models
@inject IDbContextFactory<DuneLibrary.Data.DuneLibraryContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Passage</h2>
    <hr />
    @if (passage is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Passages</dt>
            <dd class="col-sm-10">@passage.Passages</dd>
            <dt class="col-sm-2">Book</dt>
            <dd class="col-sm-10">@passage.Book</dd>
            <dt class="col-sm-2">Chapter Number</dt>
            <dd class="col-sm-10">@passage.ChapterNum</dd>
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10">@passage.Author</dd>
            <dt class="col-sm-2">Series</dt>
            <dd class="col-sm-10">@passage.Series</dd>
            <dt class="col-sm-2">Organization</dt>
            <dd class="col-sm-10">@passage.Organization</dd>
            <dt class="col-sm-2">Word Count</dt>
            <dd class="col-sm-10">@passage.WordCount</dd>
            <dt class="col-sm-2">Average Rating</dt>
            <dd class="col-sm-10">@passage.AverageRating</dd>
        </dl>
        <div>
            <a href="@($"/passages/edit?id={passage.Id}")">Edit</a> |
            <a href="@($"/passages")">Back to List</a>
        </div>
    }
</div>

@code {
    private Passage? passage;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        passage = await context.Passage.FirstOrDefaultAsync(m => m.Id == Id);

        if (passage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
